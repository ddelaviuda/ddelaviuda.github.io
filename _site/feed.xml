<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>El blog</title>
    <description>Un equipo de Ingenieros Técnicos de Telecomunicaciones e Industriales, Integradores de servicios junto con nuestros Instaladores autorizados a su servicio.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 13 Jul 2016 09:59:14 +0200</pubDate>
    <lastBuildDate>Wed, 13 Jul 2016 09:59:14 +0200</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>Criptografía elemental</title>
        <description>&lt;h2 id=&quot;definicin-de-cdigo-criptogrfico&quot;&gt;Definición de código criptográfico&lt;/h2&gt;

&lt;p&gt;Un código definido en K, M y C con un par de de algoritmos eficientes* (E,D) donde:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E=K\times M\rightarrow  C&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;D=K\times C\rightarrow M&lt;/script&gt;

&lt;p&gt;Además, debe cumplirse que:&lt;/p&gt;

&lt;p&gt;\[\forall \,m \in M, k\in K: D(k,E(k,m))=m \]&lt;/p&gt;

&lt;p&gt;*Eficiente aquí se refiere a que la ejecución de estos algoritmos debe producirse en tiempo polinomial.&lt;/p&gt;

&lt;p&gt;El algoritmo E puede tener una componente aleatoria en su salida pero el algoritmo D siempre es determinista.&lt;/p&gt;

&lt;h2 id=&quot;ejemplo-caracterstico-libreta-de-un-slo-uso-one-time-pad&quot;&gt;Ejemplo característico: Libreta de un sólo uso (&lt;em&gt;One time pad&lt;/em&gt;)&lt;/h2&gt;
&lt;p&gt;El “tamaño” del mensaje m, la clave k y el cifrado c son iguales a n.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;M={\left\{0,1\right\}}^n, K={\left\{0,1\right\}}^n,C={\left\{0,1\right\}}^n&lt;/script&gt;

&lt;p&gt;El algoritmo de cifrado y de descifrado es la operación o-exclusiva (XOR).&lt;/p&gt;

&lt;p&gt;Cifrado: &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;c=k\oplus m&lt;/script&gt;

&lt;p&gt;Descifrado: &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;m=k\oplus c&lt;/script&gt;

&lt;h2 id=&quot;teora-de-la-seguridad-en-la-informacin-shanon-1949&quot;&gt;Teoría de la seguridad en la información (Shanon 1949)&lt;/h2&gt;

&lt;p&gt;La idea intuitiva es que c no debe revelar información sobre m. Sin embargo la definición formal es más compleja como se verá a continuación.&lt;/p&gt;

&lt;p&gt;Un código de cifrado tiene &lt;strong&gt;secreto perfecto&lt;/strong&gt; si:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\forall \,m_0,m_1\, con\, y\,\forall c\in C&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Longitud(m_0)=Longitud(m_1)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P\left[ E\left(k,m_0\right)=c\right]=P\left[ E\left(k,m_1\right)=c\right]&lt;/script&gt;

&lt;p&gt;k es uniforme en el espacio K, esto es &lt;script type=&quot;math/tex&quot;&gt;k \xleftarrow{R} K&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;teorema-para-que-un-cdigo-posea-secreto-perfecto&quot;&gt;Teorema: Para que un código posea “secreto perfecto”&lt;/h2&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mid K\mid\geq \mid M\mid&lt;/script&gt;

&lt;p&gt;Es decir, la longitud de k debe ser mayor o igual a la longitud de m, el código &lt;em&gt;one time pad&lt;/em&gt; —en adelante OTP— cumple la condición el el límite.&lt;/p&gt;

&lt;h2 id=&quot;cifrador-de-flujo-stream-cipher&quot;&gt;Cifrador de flujo (&lt;em&gt;Stream cipher)&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Aquí la idea es remplazar la k aletoria de OTP un una pseudo-aleatoria. Un generador de claves pseudo-aleatorias o PRG (&lt;em&gt;Pseudo Random Generator&lt;/em&gt;) es una funcion G que:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;G: \left \{ 0,1 \right \}^{s} \rightarrow \left \{ 0,1 \right \}^{n} ; s\ll n  &lt;/script&gt;

&lt;p&gt;El algoritmo que genera esta función debe ser eficiente y su salida debe parecer aleatoria —más sobre esto después—. Esta nueva clave sustituirá a la k usanda en el OTP:&lt;/p&gt;

&lt;p&gt;Cifrado: &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;c=G\left(k\right)\oplus m&lt;/script&gt;

&lt;p&gt;Descifrado: &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;m=G\left(k\right)\oplus c&lt;/script&gt;

&lt;p&gt;Tal y como indicó Shannon este tipo de cifrado no tiene secreto perfecto y por lo tanto habrá que definir lo que se considera un generador G seguro, mientras tanto veamos la definición de un generador G impredecible.&lt;/p&gt;

&lt;p&gt;Para que un generador G sea impredecible no tiene que existir un algoritmo eficiente A que conocidos los i primeros bits generados permita calcular los n-i bits restantes. &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\exists i : G\left(k \right )\mid _{1,...i}\,\xrightarrow{algoritmo}G\left(k \right )\mid _{i+1,...n} &lt;/script&gt;

&lt;p&gt;Matemáticamente un generador es predecible si existe un algoritmo A tal que…&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\exists A\, y\, \exists  \left [  1\leqslant i\leqslant (n-1)\right ]:  P\left [  A\left\{G\left(k \right )\mid _{1,...i} \right \}=G\left(k \right )\mid _{i+1} \right ]\geqslant \left ( 1/2 +\varepsilon \right ) &lt;/script&gt;

&lt;p&gt;Con:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;k \xleftarrow{R} K&lt;/script&gt; y un &lt;script type=&quot;math/tex&quot;&gt;\varepsilon&lt;/script&gt; no despreciable.&lt;/p&gt;

&lt;p&gt;Por lo tanto, un algoritmo será impredecible si no es predecible —¡vaya vuelta para contar esto!—.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notas finales sobre qué es despreciable:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;En la práctica:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt; \varepsilon &lt;/script&gt; se considera no despreciable si &lt;script type=&quot;math/tex&quot;&gt; \varepsilon \geqslant \frac{1}{2^{30}} &lt;/script&gt; (1GB de datos) y se considera despreciable si  &lt;script type=&quot;math/tex&quot;&gt; \varepsilon \geqslant \frac{1}{2^{80}} &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;En teoría:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\varepsilon&lt;/script&gt; es una función tal que &lt;script type=&quot;math/tex&quot;&gt;\varepsilon:Z^{\geq 0}\rightarrow R^{\geq 0}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt; \varepsilon &lt;/script&gt; se considera no despreciable si &lt;script type=&quot;math/tex&quot;&gt; \exists d:\varepsilon\left(\lambda \right )\geqslant 1/\lambda^{d}&lt;/script&gt; y se considera despreciable si  &lt;script type=&quot;math/tex&quot;&gt;\forall d, \lambda\geqslant \lambda_d: \varepsilon \left(\lambda \right )\leqslant 1/\lambda^{d}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;—Ejemplo despreciable: &lt;script type=&quot;math/tex&quot;&gt;\varepsilon \left(\lambda \right )=1/2^{_{\lambda}}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Para un d dado existe una &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; tal que satisface la ecuación.&lt;/p&gt;

&lt;p&gt;—Ejemplo no despreciable: &lt;script type=&quot;math/tex&quot;&gt;\varepsilon \left(\lambda \right )=1/\lambda^{_{1000}}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;En el ejemplo se comprueba que si se toma una &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; mayor a 1000 la condición no se cumple.&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Jul 2016 20:39:22 +0200</pubDate>
        <link>/seguridad/2016/07/08/Criptografia-elemental/</link>
        <guid isPermaLink="true">/seguridad/2016/07/08/Criptografia-elemental/</guid>
        
        
        <category>seguridad</category>
        
      </item>
    
      <item>
        <title>¿Cómo crear nuevas entradas con Jekyll?</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Programa de ejemplo en C&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Jul 2016 20:39:22 +0200</pubDate>
        <link>/jekyll/update/2016/07/05/welcome-to-jekyll/</link>
        <guid isPermaLink="true">/jekyll/update/2016/07/05/welcome-to-jekyll/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Lo básico de Git y GitHub</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://services.github.com/kit/downloads/es_ES/github-git-cheat-sheet.pdf&quot;&gt;Hoja de referencia rápida&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;instalacin-de-git&quot;&gt;Instalación de Git&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;iniciar-repositorio-git&quot;&gt;Iniciar repositorio Git&lt;/h2&gt;

&lt;p&gt;Nos situamos en el directorio de nuestra elección.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Y iniciamos el repositorio, este creará un directorio .git&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;adicin-de-archivosdirectorios-al-repositorio&quot;&gt;Adición de archivos/directorios al repositorio&lt;/h2&gt;
&lt;p&gt;Cuando está creado el repositorio podemos ejecutar desde el directorio el comando git status, que nos mostrará todos los archivos que están en él y que no han sido añadidos al repositorio —más sobre esto después—. Podemos probara a ejecutarlo vacío y tras haber añadido un fichero de prueba, git nos indicará que el fichero no está en el repositorio.&lt;/p&gt;

&lt;p&gt;Ejecutando el siguiente comando veremos como el fichero de prueba.txt se al seguimiento del repositorio, todavía no está incluido en él.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add prueba.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Se pueden añadir varios archivos con el comodín * si usamos ‘’.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add &lt;span class=&quot;s1&quot;&gt;&amp;#39;*.txt&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si ejecutasemos después git status git indicará que el repositorio está al día —siempre que prueba.txt fuese el único archivo en el directorio—.&lt;/p&gt;

&lt;p&gt;El fichero prueba.txt todavía sólo está en observación, si queremos añadir –cometer– todos los ficheros en observación al respositorio ejecutamos el siguiente comando —la opción -m permite añadir un comentario, es recomendable—.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;comentario sobre la comisión&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si queremos eliminar de observación (stage) un archivo añadido antes de una comisión ejecutamos.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git reset HEAD prueba.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;repositorios-remotos-github&quot;&gt;Repositorios remotos (GitHub)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Subir&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para guardar nuestro repositorio en remoto y hacer comisiones contra él será necesario darle un nombre y asociarle una URL, el repositorio de GitHub es muy práctico para ello. Se suele usar origin como nombre para el repositorio remoto.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote add origin https://github.com/usuario/nombre_repositorio&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para actualizar el repositorio remoto usamos push tal y como sigue —la opción -u es para que git recuerde los parámetros y usando git push git añada origin y master, más sobre master después—. Es necesario que el directorio remoto no tenga nada en él, de otro modo el comando dará un error.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Bajar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si se han hecho cambios en el repositorio remoto que ahora queremos tener ejectuamos&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git pull origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;gestin-de-las-diferencias&quot;&gt;Gestión de las diferencias&lt;/h2&gt;
&lt;p&gt;¿Queremos saber la diferencia entre el repositorio remoto y nuestro último commit? Ejecutamos&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git diff HEAD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Restaurar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si una vez modificado un archivo deseamos que este se recupere a su estado en la última comisión ejecutamos el siguiente comando indicando el nombre del archivo a recuperar.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout -- octocat.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Ramas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si queremos trabajar en una “versión” diferente del proyecto crearemos una rama para modificarla libremente —en el ejemplo llamamos a la rama borrador—.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git branch borrador&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para pasar a utilizar la nueva rama ejecutamos.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout borrador&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si queremos enumerar las ramas disponibles ejecutamos&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git branch -a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En la nueva rama podremos hacer varias modificaciones, por ejemplo borrar archivos en el directorio y en la rama.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git rm &lt;span class=&quot;s1&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Una vez borrado, y para que esto se traslade al repositorio, ejecutamos.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Borrado de archivos&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si queremos que los cambios en una rama se materialicen en la maestra (master) haremos lo que sigue:&lt;/p&gt;

&lt;p&gt;Accedemos a la rama maestra.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Y unimos la rama alternativa —llamada borrador en el ejemplo— a la maestra.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git merge borrador&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si queremos eliminar la rama alternativa —llamada borrador— suponiendo que no sea necesaria.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git branch -d borrador&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Respaldo remoto&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si queremos sincronizar el repositorio local con un repositorio remoto ejecutamos el proceso en dos pasos.&lt;/p&gt;

&lt;p&gt;Búsqueda…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git fetch origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;… y respaldo.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git reset --hard origin/master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 05 Jul 2016 20:39:22 +0200</pubDate>
        <link>/desarrollo/versiones/2016/07/05/Lo-b%C3%A1sico-de-Git/</link>
        <guid isPermaLink="true">/desarrollo/versiones/2016/07/05/Lo-b%C3%A1sico-de-Git/</guid>
        
        
        <category>desarrollo</category>
        
        <category>versiones</category>
        
      </item>
    
  </channel>
</rss>
